{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","startAnimationFunction","objThis","assertThisInitialized","timer","setTimeout","setState","showSelected","clearTimeout","createMap","bh","state","numbersArray","map","x","tSize","length","react_default","a","createElement","key","data-tag","onClick","e","clickedVal","Number","target","getAttribute","newNumbers","filter","selectedValue","className","style","width","height","fontSize","pointerEvents","onBallsChange","entered","value","onKeyPressed","keyCode","toggle","modal","nearest_sq","n","Math","pow","round","sqrt","lastEntered","itemsPerRow","_this2","ballHeight","gtcValue","onKeyDown","tabIndex","display","gridTemplateColumns","gridAutoRows","reactstrap_es","isOpen","onChange","color","newArr","console","log","i","push","toConsumableArray","concat","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.053e221e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Button, ModalFooter,Input, Modal, ModalHeader, ModalBody} from 'reactstrap';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state ={\n      modal:false,\n      entered:0,\n      lastEntered:0,\n      itemsPerRow:10,\n      selectedValue:0,\n      showSelected:false,\n      numbersArray:[\n        ]\n    }\n  }\n\n  startAnimationFunction=()=> {\n    const objThis  = this;\n    this.timer = setTimeout(function(){ \n      objThis.setState({showSelected:false})\n      clearTimeout(objThis.timer)\n    }, 3000);\n}\n\ncreateMap=(bh)=>{\n  \nreturn this.state.numbersArray.map(x=>{\n  let tSize = '1rem';\n  if(this.state.numbersArray.length >100){\n    tSize = '1rem';\n  }else if(this.state.numbersArray.length <100 && this.state.numbersArray.length >15){\ntSize = '2rem';\n  }else{\n    tSize='3rem';\n  }\n  return <div key={x} data-tag={x} onClick={(e)=>{\n    let clickedVal = Number(e.target.getAttribute('data-tag'));\n    let newNumbers = this.state.numbersArray.filter(x=>x !== clickedVal);\n    this.setState({showSelected:true, selectedValue: clickedVal, numbersArray:newNumbers}, ()=>{\n      this.startAnimationFunction();\n\n\n    })\n  }} className=\"circle\" style={{width: bh+'vh', height: bh+'vh'}}><span style={{fontSize: tSize, pointerEvents:'none'}}>{x}</span></div>\n})\n}\n\n\nonBallsChange = (e) =>{\n  this.setState({entered:Number(e.target.value)});\n  \n}\n\nonKeyPressed = (e) => {\n  if(e.keyCode === 65){\n    this.toggle();\n  }\n}\n\ntoggle = () => {\n  this.setState({\n    modal: !this.state.modal\n  });\n}\n\nnearest_sq = (n) => Math.pow(Math.round(Math.sqrt(n)), 2);\n  render() {\n    \n    let itemsPerRow = 0;\n    itemsPerRow = this.nearest_sq(this.state.numbersArray.length)\n    itemsPerRow = Math.sqrt(itemsPerRow);\n    let ballHeight = 100/(itemsPerRow+1);\n    let gtcValue = 'repeat('+itemsPerRow+', 1fr)';\n    return (\n      <div className=\"App\" onKeyDown={this.onKeyPressed}\n      tabIndex=\"0\" style={{display: 'grid',\n        gridTemplateColumns: gtcValue,\n        gridAutoRows: ballHeight+'vh'}}>\n        {this.createMap(ballHeight)}\n      <div className={this.state.showSelected? 'selectedBall' : 'selectedStationary'}><span>{this.state.selectedValue}</span></div>\n        <Modal isOpen={this.state.modal} toggle={this.toggle} className={this.props.className}>\n          <ModalHeader toggle={this.toggle}>How many lottery Balls to add?</ModalHeader>\n          <ModalBody>\n            <Input onChange={this.onBallsChange}/>\n          </ModalBody>\n          <ModalFooter>\n            <Button color=\"primary\" onClick={()=>{\n              let newArr = [];\n              console.log('last entered:', this.state.lastEntered, this.state.entered);\n              for(let i=this.state.lastEntered+1; i<=this.state.entered; i++){\n                \n                newArr.push(i);\n              }\n              console.log(\"get merge:\",this.state.numbersArray, newArr)\n              this.setState({numbersArray:[...this.state.numbersArray, ...newArr], \n                lastEntered:this.state.entered});\n              this.toggle();\n            }}>Submit</Button>\n            <Button color=\"primary\" onClick={this.toggle}>Cancel</Button>\n          </ModalFooter>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}